#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
};

Node* head = nullptr;  // Global head pointer

// (a) Insertion at beginning
void insertAtBeginning(int value) {
    Node* newNode = new Node();
    newNode->data = value;
    newNode->next = head;
    head = newNode;
    cout << value << " inserted at the beginning.\n";
}

// (b) Insertion at end
void insertAtEnd(int value) {
    Node* newNode = new Node();
    newNode->data = value;
    newNode->next = nullptr;

    if (head == nullptr) {
        head = newNode;
    } else {
        Node* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
    cout << value << " inserted at the end.\n";
}

// (c) Insertion before or after a specific node
void insertBeforeAfter(int target, int value, bool insertAfter) {
    if (head == nullptr) {
        cout << "List is empty.\n";
        return;
    }

    Node* newNode = new Node();
    newNode->data = value;

    if (!insertAfter && head->data == target) {
        // insert before head
        newNode->next = head;
        head = newNode;
        cout << value << " inserted before " << target << ".\n";
        return;
    }

    Node* temp = head;
    Node* prev = nullptr;

    while (temp != nullptr && temp->data != target) {
        prev = temp;
        temp = temp->next;
    }

    if (temp == nullptr) {
        cout << "Node with value " << target << " not found.\n";
        delete newNode;
        return;
    }

    if (insertAfter) {
        newNode->next = temp->next;
        temp->next = newNode;
        cout << value << " inserted after " << target << ".\n";
    } else {
        newNode->next = temp;
        prev->next = newNode;
        cout << value << " inserted before " << target << ".\n";
    }
}

// (d) Deletion from beginning
void deleteFromBeginning() {
    if (head == nullptr) {
        cout << "List is empty.\n";
        return;
    }
    Node* temp = head;
    head = head->next;
    cout << "Deleted node with value: " << temp->data << endl;
    delete temp;
}

// (e) Deletion from end
void deleteFromEnd() {
    if (head == nullptr) {
        cout << "List is empty.\n";
        return;
    }

    if (head->next == nullptr) {
        cout << "Deleted node with value: " << head->data << endl;
        delete head;
        head = nullptr;
        return;
    }

    Node* temp = head;
    Node* prev = nullptr;
    while (temp->next != nullptr) {
        prev = temp;
        temp = temp->next;
    }
    prev->next = nullptr;
    cout << "Deleted node with value: " << temp->data << endl;
    delete temp;
}

// (f) Deletion of a specific node by value
void deleteSpecificNode(int target) {
    if (head == nullptr) {
        cout << "List is empty.\n";
        return;
    }

    if (head->data == target) {
        Node* temp = head;
        head = head->next;
        cout << "Deleted node with value: " << target << endl;
        delete temp;
        return;
    }

    Node* temp = head;
    Node* prev = nullptr;
    while (temp != nullptr && temp->data != target) {
        prev = temp;
        temp = temp->next;
    }

    if (temp == nullptr) {
        cout << "Node with value " << target << " not found.\n";
        return;
    }

    prev->next = temp->next;
    cout << "Deleted node with value: " << target << endl;
    delete temp;
}

// (g) Search node and display position
void searchNode(int value) {
    if (head == nullptr) {
        cout << "List is empty.\n";
        return;
    }

    Node* temp = head;
    int pos = 1;
    while (temp != nullptr) {
        if (temp->data == value) {
            cout << "Node " << value << " found at position " << pos << ".\n";
            return;
        }
        temp = temp->next;
        pos++;
    }
    cout << "Node " << value << " not found in the list.\n";
}

// (h) Display list
void displayList() {
    if (head == nullptr) {
        cout << "List is empty.\n";
        return;
    }
    cout << "Linked List: ";
    Node* temp = head;
    while (temp != nullptr) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

// ===============================
// Main Menu
// ===============================
int main() {
    int choice, value, target;
    bool insertAfter;

    do {
        cout << "\n===== Singly Linked List Menu =====\n";
        cout << "1. Insert at Beginning\n";
        cout << "2. Insert at End\n";
        cout << "3. Insert Before/After Specific Node\n";
        cout << "4. Delete from Beginning\n";
        cout << "5. Delete from End\n";
        cout << "6. Delete Specific Node\n";
        cout << "7. Search Node\n";
        cout << "8. Display List\n";
        cout << "9. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter value to insert: ";
                cin >> value;
                insertAtBeginning(value);
                break;
            case 2:
                cout << "Enter value to insert: ";
                cin >> value;
                insertAtEnd(value);
                break;
            case 3:
                cout << "Enter target value: ";
                cin >> target;
                cout << "Enter value to insert: ";
                cin >> value;
                cout << "Insert after (1) or before (0) the target? ";
                cin >> insertAfter;
                insertBeforeAfter(target, value, insertAfter);
                break;
            case 4:
                deleteFromBeginning();
                break;
            case 5:
                deleteFromEnd();
                break;
            case 6:
                cout << "Enter value to delete: ";
                cin >> target;
                deleteSpecificNode(target);
                break;
            case 7:
                cout << "Enter value to search: ";
                cin >> target;
                searchNode(target);
                break;
            case 8:
                displayList();
                break;
            case 9:
                cout << "Exiting program...\n";
                break;
            default:
                cout << "Invalid choice! Try again.\n";
        }
    } while (choice != 9);

    return 0;
}
