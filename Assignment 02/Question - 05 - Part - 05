#include <iostream>
using namespace std;

class SymmetricMatrix {
    int* elements;
    int size;

public:
    SymmetricMatrix(int n) {
        size = n;
        elements = new int[(size * (size + 1)) / 2];
    }

    ~SymmetricMatrix() {
        delete[] elements;
    }

    void setValue(int row, int col, int value) {
        if (row >= col) {
            int index = (row * (row - 1)) / 2 + (col - 1);
            elements[index] = value;
        } else {
            int index = (col * (col - 1)) / 2 + (row - 1);
            elements[index] = value;
        }
    }

    int getValue(int row, int col) {
        if (row >= col) {
            int index = (row * (row - 1)) / 2 + (col - 1);
            return elements[index];
        } else {
            int index = (col * (col - 1)) / 2 + (row - 1);
            return elements[index];
        }
    }

    void printMatrix() {
        for (int row = 1; row <= size; row++) {
            for (int col = 1; col <= size; col++) {
                cout << getValue(row, col) << " ";
            }
            cout << "\n";
        }
    }
};

int main() {
    int n;
    cout << "Enter the size of the symmetric matrix: ";
    cin >> n;

    SymmetricMatrix matrix(n);

    cout << "Enter elements for the lower triangle (including diagonal):\n";
    for (int row = 1; row <= n; row++) {
        for (int col = 1; col <= row; col++) {
            int value;
            cin >> value;
            matrix.setValue(row, col, value);
        }
    }

    cout << "\nThe complete symmetric matrix is:\n";
    matrix.printMatrix();

    return 0;
}
